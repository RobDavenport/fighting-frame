use std::fs::File;
use std::io::{self, Write};

use crate::OutCharacterData;

pub fn generate_character_data_source(
    character: &OutCharacterData,
    file_path: &str,
) -> io::Result<()> {
    // Open (or create) the output file.
    let mut file = File::create(file_path)?;

    writeln!(
        file,
        "/// Autogenerated file from exporter/src/source_writer.rs."
    )?;

    // Write the necessary imports.
    writeln!(file, "use glam::{{Quat, Vec3}};")?;
    // Adjust the import path (`your_crate`) to your actual crate if needed.
    writeln!(
        file,
        "use crate::db::{{CharacterGraphicsData, MeshData, AnimationData}};"
    )?;
    writeln!(file, "use shared::Trs;")?;

    // --- Static Mesh Data ---
    writeln!(file, "// Static mesh data")?;
    writeln!(file, "static MESH_DATA: &[MeshData] = &[")?;
    for mesh in character.mesh.iter() {
        // Format vertices as comma-separated floats.
        let vertices_str = mesh
            .vertices
            .iter()
            .map(|v| format!("{:.9}", v))
            .collect::<Vec<_>>()
            .join(", ");
        // Format indices as comma-separated integers.
        let indices_str = mesh
            .indices
            .iter()
            .map(|i| i.to_string())
            .collect::<Vec<_>>()
            .join(", ");
        writeln!(file, "    MeshData {{")?;
        // Use a slice literal for static data.
        writeln!(file, "        vertices: &[{}],", vertices_str)?;
        writeln!(file, "        indices: &[{}],", indices_str)?;
        writeln!(file, "    }},")?;
    }
    writeln!(file, "];")?;
    writeln!(file)?;

    // --- Static Animation Data ---
    writeln!(file, "// Static animation data")?;
    writeln!(file, "static ANIMATION_DATA: &[AnimationData] = &[",)?;
    for anim in character.animation_data.iter() {
        writeln!(file, "    AnimationData {{")?;
        // Use a string literal for the name.
        writeln!(file, "        name: \"{}\",", anim.name)?;
        writeln!(file, "        data: &[")?;
        // Each AnimationData contains one or more sequences (arrays) of Trs.
        for sequence in anim.data.iter() {
            writeln!(file, "            &[")?;
            for trs in sequence.iter() {
                writeln!(file, "                Trs {{")?;
                writeln!(
                    file,
                    "                    translation: Vec3::new({:.9}, {:.9}, {:.9}),",
                    trs.translation.x, trs.translation.y, trs.translation.z
                )?;
                writeln!(
                    file,
                    "                    rotation: Quat::from_xyzw({:.9}, {:.9}, {:.9}, {:.9}),",
                    trs.rotation.x, trs.rotation.y, trs.rotation.z, trs.rotation.w
                )?;
                writeln!(
                    file,
                    "                    scale: Vec3::new({:.9}, {:.9}, {:.9}),",
                    trs.scale.x, trs.scale.y, trs.scale.z
                )?;
                writeln!(file, "                }},")?;
            }
            writeln!(file, "            ],")?;
        }
        writeln!(file, "        ],")?;
        writeln!(file, "    }},")?;
    }
    writeln!(file, "];")?;
    writeln!(file)?;

    // --- Static Character Data ---
    writeln!(file, "// Static character data")?;
    writeln!(
        file,
        "pub static CHARACTER_GRAPHICS_DATA: CharacterGraphicsData = CharacterGraphicsData {{"
    )?;
    writeln!(file, "    meshes: &MESH_DATA,")?;
    writeln!(file, "    animations: &ANIMATION_DATA,")?;
    writeln!(file, "}};")?;
    writeln!(file)?;

    Ok(())
}
